<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>te9yie</title>
        <link>https://te9yie.github.io</link>
        <description>te9yie.github.io</description>
        <lastBuildDate>Tue, 16 Mar 2021 13:13:26 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[2021-03-15]]></title>
            <link>https://te9yie.github.io/b/2021-03-15</link>
            <guid>https://te9yie.github.io/b/2021-03-15</guid>
            <description><![CDATA[2021-03-15]]></description>
            <content:encoded><![CDATA[<p>順番がおかしい気もするけど<a class="internal new" href="/w/JavaScript">JavaScript</a>でインタラクティブなものを作ろうと思った。</p>
<p><a href="https://p5js.org/">p5.js</a>や<a href="https://threejs.org/">Three.js</a>を少し触ってみたり。サンプルをなぞるだけでなく何かを作らないと調べるモチベーションが湧かないな。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-11]]></title>
            <link>https://te9yie.github.io/b/2021-03-11</link>
            <guid>https://te9yie.github.io/b/2021-03-11</guid>
            <description><![CDATA[2021-03-11]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/WebAssembly">WebAssembly</a>でマウスイベントの処理もやってみた。</p>
<p><a href="https://github.com/te9yie/wasm-mouse-event/">https://github.com/te9yie/wasm-mouse-event/</a></p>
<iframe
    title="wasm-mouse-event"
    width="430"
    height="230"
    src="https://te9yie.github.io/wasm-mouse-event/">
</iframe>
<p>楽しくなってきた。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-10]]></title>
            <link>https://te9yie.github.io/b/2021-03-10</link>
            <guid>https://te9yie.github.io/b/2021-03-10</guid>
            <description><![CDATA[2021-03-10]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/webpack">webpack</a>のことを調べて最新の<a class="internal new" href="/w/webpack">webpack</a>でも<a class="internal new" href="/w/WebAssembly">WebAssembly</a>が使えるようになった。<a href="https://rustwasm.github.io/docs/wasm-bindgen/">The <code>wasm-bindgen</code> Guide</a>を読みながら、アニメーションするものを作ってみた。</p>
<p><a href="https://github.com/te9yie/wasm-bounce-ball">https://github.com/te9yie/wasm-bounce-ball</a></p>
<iframe
    title="wasm-bounce-ball"
    width="430"
    height="230"
    src="https://te9yie.github.io/wasm-bounce-ball">
</iframe>
<hr>
<p><code>Window.requestAnimationFrame()</code>の呼び出しが難解。</p>
<p><a class="internal new" href="/w/JavaScript">JavaScript</a>でもクロージャを作って、その中で自分自身を渡すみたいな作りになる。</p>
<pre><code class="language-javascript">const step = (now) => {
    ...
    window.requestAnimationFrame(step);
};
window.requestAnimationFrame(step);
</code></pre>
<p><a class="internal new" href="/w/Rust">Rust</a>だとこんな感じ。クロージャの中で自分自身を使いたいから先に変数は定義しておいて、登録用とクロージャ用に<code>Rc</code>で共有して、あとで代入するから<code>RefCell</code>にして――みたいな。</p>
<pre><code class="language-rust">let f = Rc::new(RefCell::new(None));
let ff = Rc::clone(&#x26;f);
*ff.borrow_mut() = Some(Closure::wrap(Box::new(move |now| {
    ...
    request_animation_frame(f.borrow().as_ref().unwrap());
}) as Box&#x3C;dyn FnMut(f64)>));
request_animation_frame(ff.borrow().as_ref().unwrap());
</code></pre>
<p>マウスやキーボードなどの入力も取れるようになると、もう少し面白いものも作れそうだ。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-08]]></title>
            <link>https://te9yie.github.io/b/2021-03-08</link>
            <guid>https://te9yie.github.io/b/2021-03-08</guid>
            <description><![CDATA[2021-03-08]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/Rust">Rust</a>で<a class="internal new" href="/w/WebAssembly">WebAssembly</a>を生成しようにも、<a class="internal new" href="/w/webpack">webpack</a>の挙動が理解できてなくて意味が分からない。一旦<a class="internal new" href="/w/webpack">webpack</a>使わずに、<a class="internal new" href="/w/Rust">Rust</a>から<code>wasm</code>を生成し、それを<a class="internal new" href="/w/HTML">HTML</a>から読み込むだけのところから始めてみる。</p>
<p><a class="internal new" href="/w/Rust">Rust</a>のクレートとして<code>wasm-bindgen</code>を使う。これは、<a class="internal new" href="/w/Rust">Rust</a>と<a class="internal new" href="/w/JavaScript">JavaScript</a>の橋渡しをしてくれる。あと<code>web-sys</code>。これを使うと<a class="internal new" href="/w/Rust">Rust</a>から<a class="internal new" href="/w/DOM">DOM</a>を操作できるようになる。</p>
<p><code>lib.rs</code>:</p>
<pre><code class="language-rust">use wasm_bindgen::prelude::*;
use wasm_bindgen::JsCast;

#[wasm_bindgen(start)]
pub fn main() {
    let window = web_sys::window().unwrap();
    let document = window.document().unwrap();
    let canvas = document.get_element_by_id("canvas").unwrap();
    let canvas = canvas.dyn_into::&#x3C;web_sys::HtmlCanvasElement>().unwrap();
    let context = canvas.get_context("2d").unwrap();
    let context = context
        .unwrap()
        .dyn_into::&#x3C;web_sys::CanvasRenderingContext2d>()
        .unwrap();

    context.set_font("100% sans-serif");
    context.fill_text("Hello WASM!", 10.0, 20.0).unwrap();

    context.set_fill_style(&#x26;"red".into());
    context.fill_rect(20.0, 30.0, 40.0, 40.0);

    context.set_fill_style(&#x26;"green".into());
    context.fill_rect(40.0, 50.0, 40.0, 40.0);
}
</code></pre>
<p><code>Cargo.toml</code>:</p>
<pre><code class="language-toml">[package]
name = "hello-wasm-canvas"
version = "0.1.0"
authors = ["te9yie &#x3C;te9yie@users.noreply.github.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[dependencies]
wasm-bindgen = "*"

[dependencies.web-sys]
version = "*"
features = [
    "CanvasRenderingContext2d",
    "Document",
    "Element",
    "HtmlCanvasElement",
    "Window",
]
</code></pre>
<p>ビルドしてみる。</p>
<pre><code class="language-bash">$ wasm-pack build --target web
</code></pre>
<p><code>pkg</code>ディレクトリが生成される。</p>
<pre><code class="language-bash">pkg
├── hello_wasm_canvas.d.ts
├── hello_wasm_canvas.js
├── hello_wasm_canvas_bg.wasm
├── hello_wasm_canvas_bg.wasm.d.ts
└── package.json
</code></pre>
<p><a class="internal new" href="/w/TypeScript">TypeScript</a>用の型情報も生成されるんだな。</p>
<p>これを読み込む<a class="internal new" href="/w/HTML">HTML</a>を書いてみる。</p>
<p><code>index.html</code>:</p>
<pre><code class="language-html">&#x3C;html>
    &#x3C;body>
        &#x3C;script type="module">
            import init from "./pkg/hello_wasm_canvas.js";
            const run = async () => {
                await init();
            }
            run();
        &#x3C;/script>
        &#x3C;canvas id="canvas" />
    &#x3C;/body>
&#x3C;/html>
</code></pre>
<p>適当にサーバを立てて確認してみる。</p>
<pre><code class="language-bash">$ npx serve
</code></pre>
<p>動いた！</p>
<p><a class="internal new" href="/w/webpack">webpack</a>でこんな感じの<a class="internal new" href="/w/HTML">HTML</a>を生成したりしてたんだな。それだけなのになんでバージョン4と5であんなに挙動が変わるんだろう。<a class="internal new" href="/w/webpack">webpack</a>の<code>html-webpack-plugin</code>と<code>wasm-pack-plugin</code>あたりを調べてみようか。どうせならバージョン5の方で動かしてみたい。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-07]]></title>
            <link>https://te9yie.github.io/b/2021-03-07</link>
            <guid>https://te9yie.github.io/b/2021-03-07</guid>
            <description><![CDATA[2021-03-07]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/Rust">Rust</a>から<a class="internal new" href="/w/WebAssembly">WebAssembly</a>を作ってみる。</p>
<p><a href="https://rustwasm.github.io/docs/wasm-bindgen/examples/hello-world.html">Hello, World! - The <code>wasm-bindgen</code> Guide</a>を参考にやってみたんだけど、色々上手く動かなかった。</p>
<pre><code class="language-bash">$ cargo new hello-wasm --lib
$ cd hello-wasm
$ yarn init -y
$ yarn add -D @wasm-tool/wasm-pack-plugin text-encoding html-webpack-plugin webpack webpack-cli webpack-dev-server
$ code . # サンプルのコードを参考に色々書く
$ yarn build
</code></pre>
<p>ここでエラー</p>
<pre><code class="language-bash">yarn run v1.22.10
$ webpack
🧐  Checking for wasm-pack...

ℹ️  Installing wasm-pack 

[webpack-cli] Error: Rust compilation.
    at ChildProcess.p.on.code (/home/i/w/hello-wasm/node_modules/@wasm-tool/wasm-pack-plugin/plugin.js:221:16)
    at ChildProcess.emit (events.js:198:13)
    at maybeClose (internal/child_process.js:982:16)
    at Socket.stream.socket.on (internal/child_process.js:389:11)
    at Socket.emit (events.js:198:13)
    at Pipe._handle.close (net.js:607:12)
error Command failed with exit code 2.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>
<p><code>cargo build</code>は問題なくて<code>$(npm bin)/webpack</code>したらエラーになる。
<code>wasm-pack-plugin</code>ってのでコケてそうだったので、<a href="https://github.com/wasm-tool/wasm-pack-plugin">wasm-tool/wasm-pack-plugin: webpack plugin for Rust</a>を見に行ったら、<code>wasm-pack</code>を入れろって書いてあった。よく見るとメッセージにも<code>Installing wasm-pack</code>って出てた。</p>
<pre><code class="language-bash">$ cargo install wasm-pack
$ yarn build
</code></pre>
<p>またエラー</p>
<pre><code class="language-bash">yarn run v1.22.10
$ webpack
🧐  Checking for wasm-pack...

✅  wasm-pack is installed at /home/i/.cargo/bin/wasm-pack. 

ℹ️  Compiling your crate in development mode...

[INFO]: Checking for the Wasm target...
[INFO]: Compiling to Wasm...
   Compiling cfg-if v1.0.0
   Compiling wasm-bindgen v0.2.71
   Compiling hello-wasm v0.1.0 (/home/i/w/hello-wasm)
    Finished dev [unoptimized + debuginfo] target(s) in 0.83s
:-) [WARN]: origin crate has no README
[INFO]: Installing wasm-bindgen...
[INFO]: Optional fields missing from Cargo.toml: 'description', 'repository', and 'license'. These are not necessary, but recommended
[INFO]: :-) Done in 1.06s
[INFO]: :-) Your wasm pkg is ready to publish at /home/i/w/hello-wasm/pkg.
✅  Your crate has been correctly compiled

asset vendors-node_modules_text-encoding_index_js.index.js 623 KiB [emitted] (id hint: vendors)
asset index.js 13.3 KiB [emitted] (name: main)
asset pkg_index_js.index.js 7.28 KiB [emitted]
asset index.html 232 bytes [emitted]
runtime modules 7.32 KiB 11 modules
cacheable modules 692 KiB
  modules by path ./pkg/ 74.7 KiB
    ./pkg/index.js 71 bytes [built] [code generated]
    ./pkg/index_bg.js 3.25 KiB [built] [code generated]
    ./pkg/index_bg.wasm 71.4 KiB [built] [code generated] [1 error]
  modules by path ./node_modules/text-encoding/ 617 KiB
    ./node_modules/text-encoding/index.js 258 bytes [built] [code generated]
    ./node_modules/text-encoding/lib/encoding.js 99.1 KiB [built] [code generated]
    ./node_modules/text-encoding/lib/encoding-indexes.js 518 KiB [built] [code generated]
  ./index.js 88 bytes [built] [code generated]

ERROR in ./pkg/index_bg.wasm 1:0
Module parse failed: Unexpected character '' (1:0)
The module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.
BREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.
You need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).
For files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: "webassembly/async"').
(Source code omitted for this binary file)
 @ ./pkg/index.js 1:0-40
 @ ./index.js 1:13-28

webpack 5.24.3 compiled with 1 error in 1526 ms
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>
<p><code>experiments.asyncWebAssembly: true</code>にして<code>module.rules</code>を設定しろとのことなので<code>webpack.config.js</code>を修正した。</p>
<pre><code class="language-diff">+  experiments: {
+    asyncWebAssembly: true,
+  },
+  module: {
+    rules: [
+      {
+        test: /\.wasm/,
+        type: "webassembly/async",
+      },
+    ],
+  },
</code></pre>
<p><code>yarn build</code>が通ったので<code>yarn serve</code>してみる。エラー。</p>
<pre><code class="language-bash">$ yarn serve
yarn run v1.22.10
$ webpack-dev-server
internal/modules/cjs/loader.js:638
    throw err;
    ^

Error: Cannot find module 'webpack-cli/bin/config-yargs'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)
    at Function.Module._load (internal/modules/cjs/loader.js:562:25)
    at Module.require (internal/modules/cjs/loader.js:692:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.&#x3C;anonymous> (/home/i/w/hello-wasm/node_modules/webpack-dev-server/bin/webpack-dev-server.js:65:1)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>
<p><a href="https://iwb.jp/webpack-cli-dev-server-error-config-yargs/">webpackでWebサーバーでの確認にwebpack-dev-serverは不可 | iwb.jp</a>で、<code>webpack-cli serve</code>を使えとのことなので、修正してみる。</p>
<pre><code class="language-diff">-    "serve": "webpack-dev-server"
+    "serve": "webpack-cli serve --open --mode development"
</code></pre>
<p>エラーなく動いた。が、何も起きない。どうなってんだ？と思ってデベロッパーツールを見たらエラーが出てた。</p>
<pre><code>TypeError: Cannot read property '__wbindgen_malloc' of undefined
    at Module.greet (index_bg.js:115)
    at eval (index.js:4)
</code></pre>
<p>…無理。もう分かんない。
そもそもサンプル動くんかよ。と思って</p>
<p><a href="https://github.com/rustwasm/wasm-bindgen/tree/master/examples/hello_world">https://github.com/rustwasm/wasm-bindgen/tree/master/examples/hello_world</a></p>
<p>を試したら動いた。
何が違うんだと思ってよく見比べると<code>package.json</code>が違った。</p>
<pre><code class="language-diff">-    "html-webpack-plugin": "^5.2.0",
-    "webpack": "^5.24.3",
-    "webpack-cli": "^4.5.0",
-    "webpack-dev-server": "^3.11.2"
+    "html-webpack-plugin": "^3.2.0",
+    "webpack": "^4.29.4",
+    "webpack-cli": "^3.1.1",
+    "webpack-dev-server": "^3.1.0"
</code></pre>
<p>さっきからエラーの内容も大体<a class="internal new" href="/w/webpack">webpack</a>のバージョンが4じゃなくて5だから出てる雰囲気を醸し出していた。なんでも最新じゃだめなんだねぇ。</p>
<p>とりあえず<a class="internal new" href="/w/webpack">webpack</a>あたりのバージョンを4にしてみる。</p>
<pre><code class="language-diff">-    "html-webpack-plugin": "^5.2.0",
-    "webpack": "^5.24.3",
+    "html-webpack-plugin": "^4.0.0",
+    "webpack": "^4.0.0",
</code></pre>
<p>動いた。</p>
<h3>まとめ</h3>
<p>パッケージのバージョン合わせるの大事！！！</p>
]]></content:encoded>
        </item>
    </channel>
</rss>